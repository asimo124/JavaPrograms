
import info.alexhawley.ConfigLoader;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Created by AHawley on 3/24/2017.
 */
public class TargetConnForm {

    public SourceTargetModel SourceTarget = new SourceTargetModel();
    public DatabaseSSH database = new DatabaseSSH(new SourceTargetModel(), DatabaseType.TARGET);

    public JPanel panelMain;
    public JTextField text_TargetHost;
    public JTextField text_TargetUsername;
    public JTextField text_TargetPassword;
    public JTextField text_TargetSSHHost;
    public JTextField text_TargetSSHUsername;
    public JTextField text_TargetSSHPassword;
    public JTextField text_TargetSSHPort;
    public JTextField text_TargetDatabase;
    public JCheckBox chkSSHTunnelCheckBox;
    public JComboBox cboSelTargetDB;
    public JButton btnCreateTarget;
    public JButton btnNext;

    private String target_host = "";
    private String target_username = "";
    private String target_password = "";
    private String target_ssh_host = "";
    private String target_ssh_username = "";
    private String target_ssh_password = "";
    private String target_ssh_port = "";
    private int source_ssh_port_number = 22;

    public String source_db = "";

    public boolean sourceConnected = false;
    public Connection conn = null;

    public TargetConnForm(SourceTargetModel GetSourceTarget) {

        SourceTarget = GetSourceTarget;

        btnCreateTarget.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String retVal = "";

                // if this is enabled, will set default fields
                /************/
                int debug = 1;
                /************/
                if (debug == 1) {

                    ConfigLoader config = new ConfigLoader();
                    text_TargetSSHHost.setText(config.getSsh_host());
                    text_TargetSSHUsername.setText(config.getSsh_username());
                    text_TargetSSHPassword.setText(config.getSsh_password());
                    text_TargetSSHPort.setText(config.getSsh_port());
                    text_TargetHost.setText(config.getDb_host());
                    text_TargetUsername.setText(config.getDb_username());
                    text_TargetPassword.setText(config.getDb_password());
                    text_TargetDatabase.setText(config.getDb_name());
                }

                if (text_TargetDatabase.isEnabled()) {
                    source_db = text_TargetDatabase.getText();
                } else if (cboSelTargetDB.isEnabled()) {
                    source_db = cboSelTargetDB.getSelectedItem().toString();
                }

                if (chkSSHTunnelCheckBox.isEnabled()) {  // if SSH Tunneling

                    // SSH Tunnel Code
                    DatabaseSSH Importer = null;
                    if (text_TargetSSHPort.getText().trim() == "") {
                        text_TargetSSHPort.setText("22");
                    }
                    String ssh_port = text_TargetSSHPort.getText();
                    ssh_port = text_TargetSSHPort.getText().trim();

                    SourceTarget.setTargetIsSSHTunnel(chkSSHTunnelCheckBox.isEnabled());
                    if (chkSSHTunnelCheckBox.isEnabled()) {
                        SourceTarget.setTargetSSHHost(text_TargetSSHHost.getText().toString());
                        SourceTarget.setTargetSSHUsername(text_TargetSSHUsername.getText().toString());
                        SourceTarget.setTargetSSHPassword(text_TargetSSHPassword.getText().toString());
                        SourceTarget.setTargetSSHPort(text_TargetSSHPort.getText().toString());
                    }
                    SourceTarget.setTargetDBHost(text_TargetHost.getText().toString());
                    SourceTarget.setTargetDBUsername(text_TargetUsername.getText().toString());
                    SourceTarget.setTargetDBPassword(text_TargetPassword.getText().toString());
                    SourceTarget.setTargetDBName(text_TargetDatabase.getText().toString());

                    database = new DatabaseSSH(SourceTarget, DatabaseType.SOURCE);
                    retVal = database.setConnect();

                    if (!retVal.equals("SUCCESS")) {

                        JOptionPane.showMessageDialog(null, "Could not connect: " + retVal);

                    } else {  // if connection is success

                        /**********************
                         * Connection Success *
                         **********************/
                        JOptionPane.showMessageDialog(null, "Successfully Connected");

                        /**********************
                         * Connection Success *
                         **********************/

                        target_host = text_TargetHost.getText().toString();
                        target_username = text_TargetUsername.getText().toString();
                        target_password = text_TargetPassword.getText().toString();
                        target_ssh_host = text_TargetSSHHost.getText().toString();
                        target_ssh_username = text_TargetSSHUsername.getText().toString();
                        target_ssh_password = text_TargetSSHPassword.getText().toString();
                        target_ssh_port = text_TargetSSHPort.getText().toString();

                        // fill source db dropdown
                        fillDatabasesDropdown();

                        // enable next button
                        btnNext.setEnabled(true);

                    }

                } else {  // if straight MySQL Connection

                    // Straight MySQL Connection Code


                        sourceConnected = true;
                        DatabaseLocal database_loc = new DatabaseLocal(SourceTarget, DatabaseType.SOURCE);



                    //////////////////////////////////////
                    //                                  //
                    //                                  //
                    // TODO - run a prepared statement  //
                    //                                  //
                    //                                  //
                    //////////////////////////////////////

                }
            }
        });

        chkSSHTunnelCheckBox.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                AbstractButton absB = (AbstractButton) e.getSource();
                ButtonModel bMod = absB.getModel();
                boolean selected = bMod.isSelected();

                if (!selected) {

                    text_TargetSSHHost.setEnabled(false);
                    text_TargetSSHUsername.setEnabled(false);
                    text_TargetSSHPassword.setEnabled(false);
                    text_TargetSSHPort.setEnabled(false);
                } else {

                    text_TargetSSHHost.setEnabled(true);
                    text_TargetSSHUsername.setEnabled(true);
                    text_TargetSSHPassword.setEnabled(true);
                    text_TargetSSHPort.setEnabled(true);
                }
            }
        });

        cboSelTargetDB.addActionListener (new ActionListener () {
            public void actionPerformed(ActionEvent e) {
                source_db = cboSelTargetDB.getSelectedItem().toString();
            }
        });

        btnNext.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                // Save Source Settings into Model Class which save source/target settings, and is passed between JFrames

                SourceTarget.setTargetIsSSHTunnel(chkSSHTunnelCheckBox.isEnabled());
                if (chkSSHTunnelCheckBox.isEnabled()) {
                    SourceTarget.setSourceSSHHost(text_TargetSSHHost.getText().toString());
                    SourceTarget.setSourceSSHUsername(text_TargetSSHUsername.getText().toString());
                    SourceTarget.setSourceSSHPassword(text_TargetSSHPassword.getText().toString());
                    SourceTarget.setSourceSSHPort(text_TargetSSHPort.getText().toString());
                }
                SourceTarget.setSourceDBHost(text_TargetHost.getText().toString());
                SourceTarget.setSourceDBUsername(text_TargetUsername.getText().toString());
                SourceTarget.setSourceDBPassword(text_TargetPassword.getText().toString());
                SourceTarget.setSourceDBName(text_TargetDatabase.getText().toString());

                SourceTablesForm targetConn = new SourceTablesForm(SourceTarget);
                JFrame frame = new JFrame("Select Source Table(s)");
                frame.setContentPane(targetConn.panelMain);
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
                frame.setLocationRelativeTo(null);
            }
        });
    }

    /**
     * function to fill source databases list
     * after entering source connection info
     */
    public void fillDatabasesDropdown() {

        List<Map<String, String>> retVal = new ArrayList<>();
        try {
            retVal = database.getQuery("SHOW DATABASES");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        List<String> dbList = new ArrayList<>();
        for (Map<String, String>item: retVal) {
            Iterator it = item.entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry)it.next();
                dbList.add(pair.getValue().toString());
            }
        }
        String[] dbs = dbList.toArray(new String[dbList.size()]);
        cboSelTargetDB.setEnabled(true);
        cboSelTargetDB.setModel(new DefaultComboBoxModel(dbs));
        if (text_TargetDatabase.isEnabled() && text_TargetDatabase.getText() != "") {
            int i = 0;
            for (String db : dbList) {
                if (db.equals(text_TargetDatabase.getText().toString().trim())) {
                    cboSelTargetDB.setSelectedIndex(i);
                }
                i++;
            }
        }
        text_TargetDatabase.setEnabled(false);
    }
}
